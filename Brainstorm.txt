Features:
 - 2D, top-town Stardew\Old RPG-like map
 - Player:
* Can be moving up, down, left and right (w\o gravity).
* Collision\obstacle detection reserved to Unity.
* Coming close to an interactable object shows a hotkey prompt above the Player - using that hotkey interacts with the environment (talks with NPCs too)
* Can open Invnentory: via Hotkey or via a button on screen.
	* Inventory to be described separately.
** Would be nice to have: Pathfinding, click-to-move on screen.
	+ Would be consistent with opening up UI with mouse.
	- Personally, I find that feature not super useful as moving pseudo isometric 2D screen scrolling feels difficult to both look and navigate via mouse simultanously, unlike using WASD.
	- Potentially may require more research and\or more assets.
* Player and his inventory get saved automatically upon closing the game, and loaded in upon the game's start.
	Must be serialized using JSON as I don't trust binary serialization;
	For the purpose of this prototype, there'll be no verification via server or encryption; those features, however, are possible ideas to prevent player tampering if needed.
		To prevent tampering, we can also split save files and verify DLC ownership in the game. There are a lot potential options here, but for now - no encryption, bare JSON.
** Also would be really cool: 
	If we could have shop keeper greet the player without dialogue. Launching the game many times would produce different replicas.
** To make text localizable, it's a good idea to have a string dataset in a game with different keys in aforementioned set. Then, keys are to be pulled each time an actual localized string is required.
	It would be really nice to have here, but it's a pain to maintain without a parser from external source (like Google tables as a basic example)
	I am not sure if I can make said parser (although it is relatively simple) within allocated time while having the entirety of art and game design on me. Thus, it is marked as "nice-to-have".
	This should be noted, however, the earlier localization is implemented, easier it is to maintain; doing this change late in the cycle would result in having to go over every UI-related prefab and making double sure it is localized.
* Player's usual UI will also include a money counter on the side.
* Start of the game is Player sitting in a bed, with a button prompt to begin a game being shown on the bottom in a bit of a pulsating manner to attract attention.
	Pressing button allows the Player to get out of the bed.
	UI appears, and the control is granted.
	Bed itself should be made in classical manner with a bedsheet sprite hanging above the player and above the bed itself.
** When Player gets out of the bed, we may make the sheet disappear, if it won't clash with the game's visual style too much.
** To spend money for game's main feature, we need to get that money. Having some form of minigame or a method of acquiring that money would be a nice-to-have feature.
	If I'll be pressed on time (and originally for testing), I'll be using a simple interactable bag of money that will toss coins around.
	Those coins will be pickable by player after a bit of time, and after some more time, they'll magnet towards the player if he's within close proximity.
	What actual minigame may be is to be decided upon.	

 - Inventory
Originally:
* Cell-based, with a money counter on the side. Player can freely put items into any cell, and whenever a new item is acquired, it occupies first free slot.
	- This isn't very good, because so far design has been straying away from mouse control.
	- Having all items in front of you at all times would be rather problematic if we want to customize looks of our character (kind of the whole point).
Now:
* On the left side you should see your character in the world. During this time, character faces the screen.
* On the right of the character there are slots for items equipped by character. One of the slots is selected.
	Selecting another slot is done via W-S keys
* On the right of the equipment slots there's inventory. Inventory shows all unequipped items from the category of selected slot.
	You can scroll through those items using A-D keys; one of the items is selected by default
	Pressing R equips the item from unequipped ones into a slot, and naturally unequips previously equipped item (if any).
** This control scheme feels ergonomic but also somewhat restrictive.
	It would be great if we could rotate our character (make him face different directions) so we can have a better comparison of items.
	At the same time, we want to make the game play well with just KBM setup, no gamepads. With gamepads it would, of course, be easier.
	For rotation keys, we can use Q-E as a nice-to-have feature (Q to rotate left, E to rotate right)
* Equipped items must be shown on a player. Considering references, for each item we'd need the following art resources:
	Front equipped sprite
	Side equipped sprite (always must be facing same side for ALL items, we mirror it for the other)
	Back equipped sprite
	Item icon
* For now let's decide on 4 types of items (and thus 4 slots to be equipped):
	Headpiece
	Chestpiece
	Pants
	Boots
		Each piece will affect certain parts of the Player, who probably will be comprised of sprite pieces (similar to what we see on LSM steam page).
		It is possible to attach additional animators for dangly pieces like green jacket on the steam page, but for now I'm gonna work a bit simpler right now.
** Nice-to-have features: Some statblock for items and\or UI description for them.
	Can kinda cut the feature down by just showing selected item's name - this would be rather simple.
	Stats could include how heat insulating or "warm" a piece of clothing is, current state (whether in need of repairs or not), how dirty it is, et cetera.
** An even nicer-to-have feature: being able to recolor piece of clothing (again, taking inspiration from LSM).
	For this I would maybe make a specific NPC aside from shopkeeper.


Talking
* First time we talk to an NPC via interaction prompt, we should get additional dialogue; Every next interaction should yield just 1 line (or no dialogue at all) to make player




Development:
- Considering we're making a top-down map, I decided to opt for writing my own movement (it is rather simple here)
- Since I have a lot of features in mind and time is somewhat short, I went with old input system as I have a lot of experience with it.
- Got a crash on the "Undo" operation after creating Dynamic Sprite. Welp.
- I was pleasantly surprised with some 2D features this version of Unity had; Back in the day I really wanted a sprite deformer, and Sprite Shapes really remind me of that feature.
- Background sprite would likely be tiled and generated; for this prototype, something more simple like just a sprite with tiling would do.
- Sorely missing some form of a grid system and I think collision for movement detection ideally should be some kind of simplistic homebrew; Will not be implementing this, because again, pressured on time.
	But I do think it's kind of cool that we can move relatively freely in 2D space.

Visuals:
- I am certainly not an artist, but I nonetheless decided to make my own art. It is bad, but at the very least game will be looking consistent(-ly goofy).
	I tried looking for something that could fit current design ideas I have, but couldn't find packs that would look well together and complete the game.
- While making basic GameObject hierarchy, I did my best to leave Order In Layer space between character's parts.
	This is in case I'll get around to implementing additional sprites that could appear on the character, like sides of the jacket from LSW Steam page video.
	Depending on the project's requirements, it is possible to go *very* deep with this kind of customization: we can add more animators for those details that will sync with main animator's parameters, we can bind custom logic to them, and so on.
	I think I will either not implement such details or make them basic sprites that overlay above clothing's main part. Time's of the essence.
- For character's rotation, originally I planned to have an Animator integer parameter, but now I think I'll use 3 separate triggers to apply required rotation to character model.
	This way I can minimize links in between different animations while maintaining just 1 animator for main character pieces.
	Yes, 3 triggers does feel a bit hacky, but I think it's something we can hardcode because it's highly unlikely we'll have another type of rotation in-game.
- I think I ***really*** need to implement item detail system, because hats otherwise wouldn't work that well.
	With those we could accomodate exposed skin of the characters with relative ease; imagine fingerless gloves, T-shirts, bandanas, et cetera.
	Hats could have a sprite behind the head (if it doesn't obstruct character's face for example) if needed.
	We could also make things such as backpacks and other attachments.
	I will finish the rest of the requirements first, and then this feature will be top priority if I make it in time.
- Still, feels super unfortunate how rushed it all is. Even from notes it should be visible that Day 1 I already knew that time constraints will be difficult, but even then seems like I was too ambitious.
- This should be the final (couple of) pushes; Going to have to cut out basically everything non-essential - deadlines take precedence. Thankfully I'll be able to use some more stuff from my older projects to get at least a tiny touch of polish.
- Also sorry for the UI not adapting well; could certainly use more experience on how to make it look nice on PC.
- I think opening inventory and shop have awkward button assignments, but I don't think I have an ideal solution for this issue.

Inventory controls:
W-S => change category
A-D => switch to another item
E => toggle inventory
R => Unequip item
Q => Equip item


Shop controls:
A-D => switch between items
W-S => switch between selling\buying
Q => quit the menu
R => Purchase\sell item
